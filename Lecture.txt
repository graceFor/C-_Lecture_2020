// Day_1
// assign_fun.c
#include <stdio.h>

void assign(int *x, int y)
{
    *x = y;
}
int main()
{
    int a = 0, b = 999;
    assign(&a, b);
    printf("%d\n", a);
    return 0;
}

//pswap.c
#include <stdio.h>

void pswap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}
int main()
{
    int one, two;
    printf("one과 two의 값을 입력하시오: ");
    scanf("%d %d", &one, &two);
    pswap(&one, &two);
    printf("%d %d", one, two);
}

//포인터를 배열처럼 사용하기
#include <stdio.h>

int main()
{
    char str[6] = "hello";
    char *p;

    p = str;

    printf("%s\n", str);        // hello
    printf("%s\n", p);          // hello
    printf("%c\n", str[1]);     // e
    printf("%c\n", p[1]);       // e
    printf("%c\n", *(str + 1)); // e
    printf("%c\n", *(p + 1));   // e
}

//포인터를 배열처럼 사용하기
#include <stdio.h>

int main()
{
    char name[20] = "Jessie Norman";
    char *first;

    first = &name[7];      // Norman
    first[1] = 'a';        // Narman
    printf("%s\n", first); // Narman
    return 0;
}

//str_ptr.c
#include <stdio.h>

int main()
{
    char *str = "abcdefg";
    printf("%c\n", *str);
    printf("%s\n", str);

    str++;
    printf("%c\n", *str);
    printf("%s\n", str);

    str += 2;
    printf("%c\n", *str);
    printf("%s\n", str);
    return 0;
}

//str_ptr2.c => world만 출력되도록 하기
#include <stdio.h>

int main()
{
    char *str = "Hello world";

    str += 6;

    printf("%s\n", str);
    return 0;
}

// string copy program
#include <stdio.h>
void stringcopy(char *dest, char *src)
{

    for (src; *src; src++, dest++)
    {
        *dest = *src;
    }
    *dest = 0;
}
int main()
{
    char array1[20];
    char array2[20];
    scanf("%s", array1);
    stringcopy(array2, array1);
    printf("%s\n", array2);
    return 0;
}

// ref.cpp
#include <stdio.h>

void fun(int &b)
{
    b = 99;
}
int main()
{
    int a = 1;
    fun(a);
    printf("%d\n", a);
}

// return_ref.cpp
#include <stdlib.h>
#include <stdio.h>

int &makeInt(int val)
{
    int *p;
    p = (int *)malloc(sizeof(int));
    *p = val;
    return *p;
}
int main()
{
    int &a = makeInt(3);
    printf("%d\n", a);
}

// rswap.cpp
#include <stdio.h>

void rswap(int &x, int &y)
{
    int temp;
    temp = x;
    x = y;
    y = temp;
}

int main()
{
    int a = 0, b = 0;
    printf("a와 b의 값을 입력하시오 : ");
    scanf("%d %d", &a, &b);
    rswap(a, b);
    printf("%d %d\n", a, b);
}
// Day_2
// error.c
#include <stdlib.h>
#include <stdio.h>

int main()
{
    double *pDegree = NULL; // 포인터 초기화
    pDegree = (double *)malloc(sizeof(double));
    *pDegree = 12.345;
    printf("%lf\n", *pDegree);
}

// strcpy.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char str1[] = "Hello World";
    char *s;
    s = str1;
    printf("%s\n", s);
    strcpy(str1, "Howdy!");
    printf("%s\n", s);
}

// strcpy.c => malloc
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char str1[] = "Hello World";
    char *s;
    s = str1;
    s = (char *)malloc(strlen(str1) + 1);
    strcpy(s, str1);
    printf("%s\n", s);
    strcpy(str1, "Howdy!");
    printf("%s\n", s);
    printf("%s\n", str1);
}

//pointer_array.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char *pp[4];

    pp[0] = (char *)malloc(strlen("Hello") + 1);
    strcpy(pp[0], "Hello");
    printf("%s\n", pp[0]);

    char buffer[80];
    printf("string 입력 : ");
    scanf("%s", buffer);
    pp[1] = (char *)malloc(strlen(buffer) + 1);
    strcpy(pp[1], buffer);
    printf("%s\n", pp[1]);

    return 0;
}

// ptrarray.c => 최근에 넣은 값부터 출력해라
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char buffer[80];
    char *strptr[3];

    for (int i = 0; i < 3; i++)
    {
        scanf("%s", buffer);
        strptr[i] = (char *)malloc(strlen(buffer) + 1);
        strcpy(strptr[i], buffer);
    }
    for (int i = 2; i >= 0; i--)
    {
        printf("%s\n", strptr[i]);
    }
}

//darray.c => 주어진 배열을 동적 배열로 바꾸기
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    //int array[5];
    int index;
    int size;
    printf("Size를 입력하세요 : ");
    scanf("%d", &size);
    int *array = NULL;
    array = (int *)malloc(size * sizeof(int));
    for (index = 0; index < size; index++)
    {
        array[index] = index;
    }
    for (index = size - 1; index >= 0; index--)
    {
        printf("%d\n", array[index]);
    }
}

//realloc. c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char *p;
    char q[20];

    p = (char *)malloc(sizeof(char) * 10);
    printf("string 입력 : ");
    scanf("%s", q);
    strcpy(p, q);

    printf("string 입력 : ");
    scanf("%s", q);

    if (strlen(p) + strlen(q) + 1 > 10)
    {
        p = realloc(p, strlen(p) + strlen(q) + 1);
    }
    strcat(p, q);
    printf("%s\n", p);
    return 0;
}

// Day_3

// alist.c
#include <stdio.h>

int main()
{
    int start = 2;
    int score[8] = {55, 22, 11, 66, 33, 88, 44, 77};
    int next[8] = {3, 4, 1, 7, 6, -1, 0, 5};

    for (int i = start; i >= 0; i = next[i])
    {
        printf("%d\n", score[i]);
    }
    return 0;
}

//list1.c
#include <stdio.h>

struct item
{
    int score;
    struct item *next;
};

int main()
{
    struct item A, B;
    struct item *first;
    first = &A;
    A.score = 1;
    A.next = &B;
    B.score = 2;
    B.next = NULL;
    printf("%d\n", first->score);       //A의 score -> 1 출력
    printf("%d\n", A.score);            //A의 score -> 1 출력
    printf("%d\n", first->next->score); //B의 score -> 2 출력
    printf("%d\n", B.score);            //B의 score -> 2 출력
    printf("%d\n", (*(A.next)).score);  //B의 score -> 2 출력
    return 0;
}

//list2.c => 중간에 C 추가
#include <stdio.h>

struct item
{
    int score;
    struct item *next;
};

int main()
{
    struct item A, B, C;
    struct item *first;
    first = &A;
    A.score = 1;
    A.next = &B;
    B.score = 2;
    B.next = NULL;

    C.score = 3;
    C.next = &A;
    first = &C;

    printf("%d\n", first->score);             //C의 score -> 3 출력
    printf("%d\n", first->next->score);       //A의 score -> 1 출력
    printf("%d\n", first->next->next->score); //B의 score -> 2 출력

    return 0;
}

//list4.c
#include <stdio.h>

struct item
{
    int score;
    struct item *next;
};

int main()
{
    struct item A, B, C, D;
    struct item *pFirst;
    struct item *p;
    A.score = 1;
    B.score = 2;
    C.score = 3;
    D.score = 4;
    pFirst = &A;
    A.next = &B;
    B.next = &C;
    C.next = &D;
    D.next = NULL;
    p = pFirst;
    printf("%d-->", p->score); //A의 score -> 1
    p = p->next;
    printf("%d-->", p->score); //B의 score ->2
    p = p->next;
    printf("%d-->", p->score); //C의 score ->3
    p = p->next;
    printf("%d-->", p->score); //D의 score ->4

    printf("END\n");
    return 0;
}

//list5.c => 반복문을 이용해서 출력하기
#include <stdio.h>

struct item
{
    int score;
    struct item *next;
};

int main()
{
    struct item A, B, C, D;
    struct item *pFirst;
    struct item *p;
    A.score = 1;
    B.score = 2;
    C.score = 3;
    D.score = 4;
    pFirst = &A;
    A.next = &B;
    B.next = &C;
    C.next = &D;
    D.next = NULL;

    for (p = pFirst; p != NULL; p = p->next)
    {
        printf("%d-->", p->score);
    }
    printf("END\n");
    return 0;
}

//dlink.c => insert

#include <stdio.h>
#include <stdlib.h>

struct item
{
    int score;
    struct item *next;
};
struct item *p;
struct item *pFirst = NULL;

int main()
{
    p = (struct item *)malloc(sizeof(struct item));
    p->score = 33;
    p->next = pFirst;
    pFirst = p;

    p = (struct item *)malloc(sizeof(struct item));
    p->score = 22;
    p->next = pFirst;
    pFirst = p;

    p = (struct item *)malloc(sizeof(struct item));
    p->score = 11;
    p->next = pFirst;
    pFirst = p;

    printf("%d\n", pFirst->score);             //11
    printf("%d\n", pFirst->next->score);       //22
    printf("%d\n", pFirst->next->next->score); //33

    return 0;
}

//stack을 전역변수를 이용해서 만들기
#include <stdio.h>
#include <stdlib.h>

struct item
{
    int score;
    struct item *next;
};
struct item *pStack; // stack pointer

void insert(int n)
{
    struct item *pAlloc;
    pAlloc = (struct item *)malloc(sizeof(struct item));
    pAlloc->score = n;
    pAlloc->next = pStack;
    pStack = pAlloc;
}

int top()
{
    return pStack->score;
}
void pop()
{
    struct item *pFree;
    pFree = pStack; //삭제할 item 가르키기
    pStack = pStack->next;
    free(pFree);
}

int main()
{
    pStack = NULL;
    insert(1);
    insert(2);
    insert(3);

    printf("Stack top is %d\n", top()); // 3
    pop();
    printf("Stack top is %d\n", top()); // 2
    pop();
    printf("Stack top is %d\n", top()); // 1

    return 0;
}

//stack을 local 변수를 이용해서 만들기
#include <stdio.h>
#include <stdlib.h>

struct item
{
    int score;
    struct item *next;
};

void insert(struct item **s, int n)
{
    struct item *pAlloc;
    pAlloc = (struct item *)malloc(sizeof(struct item));
    pAlloc->score = n;
    pAlloc->next = *s;
    *s = pAlloc;
}

int top(struct item *s)
{
    return s->score;
}
void pop(struct item **s)
{
    struct item *pFree;
    pFree = *s; //삭제할 item 가르키기
    *s = (*s)->next;
    free(pFree);
}

int main()
{
    struct item *pStack = NULL; // stack pointer
    insert(&pStack, 1);
    insert(&pStack, 2);
    insert(&pStack, 3);

    printf("Stack top is %d\n", top(pStack)); // 3
    pop(&pStack);
    printf("Stack top is %d\n", top(pStack)); // 2
    pop(&pStack);
    printf("Stack top is %d\n", top(pStack)); // 1

    return 0;
}

//stack을 local 변수를 이용해서 만들기 => print_stack
#include <stdio.h>
#include <stdlib.h>

struct item
{
    int score;
    struct item *next;
};

void insert(struct item **s, int n)
{
    struct item *pAlloc;
    pAlloc = (struct item *)malloc(sizeof(struct item));
    pAlloc->score = n;
    pAlloc->next = *s;
    *s = pAlloc;
}

int top(struct item *s)
{
    return s->score;
}
void pop(struct item **s)
{
    struct item *pFree;
    pFree = *s; //삭제할 item 가르키기
    *s = (*s)->next;
    free(pFree);
}

void print_stack(struct item *pS)
{
    printf("TOP: ");
    for (; pS; pS = pS->next)
    {
        printf("%d --> ", pS->score);
    }
    printf("END\n");
}
int main()
{
    struct item *pStack = NULL; // stack pointer
    insert(&pStack, 1);
    insert(&pStack, 2);
    insert(&pStack, 3);

    print_stack(pStack);
    pop(&pStack);
    print_stack(pStack);
    pop(&pStack);
    print_stack(pStack);
    pop(&pStack);
    print_stack(pStack);

    return 0;
}

// Day_4

//sin(x) 그래프
#include <math.h>
#include <stdio.h>
#define PI 3.142

int main()
{
    double x;
    printf("+---------------+--------------+\n");
    for (x = 0.0; x < 2 * PI; x += 0.3)
    {
        int position;
        double y;
        y = sin(x);
        position = (int)(20.0 * y + 21.5);
        for (; position > 0; position--)
            putchar(' ');
        putchar('*');
        putchar('\n');
    }
    return 0;
}

// function_pointer에 함수 assign하기
#include <stdio.h>

void pretty_print(int val)
{
    printf("결과는 %d입니다.\n", val);
}
void simple_print(int val) { printf("%d\n", val); }

int main()
{
    void (*print)(int x);
    print = pretty_print;
    print(123);
    print = simple_print;
    print(125);

    return 0;
}

//fptest.c => 두 수를 더하는 함수 add, 두 수를 곱하는 함수 times
#include <stdio.h>

int plus(int x, int y) { return x + y; }
int times(int x, int y) { return x * y; }
int main()
{
    int (*fun)(int, int);
    fun = plus;
    printf("%d\n", fun(2, 3));
    fun = times;
    printf("%d\n", fun(2, 3));

    return 0;
}

//funpar.c => 함수 자체를 파라메터로 넘기기
#include <math.h>
#include <stdio.h>
#define PI 3.142

void draw_graph(double (*fun)(double), double from, double to)
{
    double x;
    int i;
    printf("+--------------------+--------------------+\n");
    from = from * PI / 180;
    to = to * PI / 180;
    for (x = from; x <= to; x += 0.2)
    {
        int position;
        double y;
        y = fun(x);
        position = (int)(20.0 * y + 21.5);
        for (i = 0; i < 42; i++)
        {
            if (i == position)
                putchar('*');
            else if (i == 21)
                putchar('|');
            else
                putchar(' ');
        }
        putchar('\n');
    }
}

int main()
{
    printf("sin 함수 그래프입니다.\n");
    draw_graph(sin, 0, 360);
    printf("cos 함수 그래프입니다.\n");
    draw_graph(cos, 0, 360);
}