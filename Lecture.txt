// Day_1
// assign_fun.c
#include <stdio.h>

void assign(int *x, int y)
{
    *x = y;
}
int main()
{
    int a = 0, b = 999;
    assign(&a, b);
    printf("%d\n", a);
    return 0;
}

//pswap.c
#include <stdio.h>

void pswap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b = temp;
}
int main()
{
    int one, two;
    printf("one과 two의 값을 입력하시오: ");
    scanf("%d %d", &one, &two);
    pswap(&one, &two);
    printf("%d %d", one, two);
}

//포인터를 배열처럼 사용하기
#include <stdio.h>

int main()
{
    char str[6] = "hello";
    char *p;

    p = str;

    printf("%s\n", str);        // hello
    printf("%s\n", p);          // hello
    printf("%c\n", str[1]);     // e
    printf("%c\n", p[1]);       // e
    printf("%c\n", *(str + 1)); // e
    printf("%c\n", *(p + 1));   // e
}

//포인터를 배열처럼 사용하기
#include <stdio.h>

int main()
{
    char name[20] = "Jessie Norman";
    char *first;

    first = &name[7];      // Norman
    first[1] = 'a';        // Narman
    printf("%s\n", first); // Narman
    return 0;
}

//str_ptr.c
#include <stdio.h>

int main()
{
    char *str = "abcdefg";
    printf("%c\n", *str);
    printf("%s\n", str);

    str++;
    printf("%c\n", *str);
    printf("%s\n", str);

    str += 2;
    printf("%c\n", *str);
    printf("%s\n", str);
    return 0;
}

//str_ptr2.c => world만 출력되도록 하기
#include <stdio.h>

int main()
{
    char *str = "Hello world";

    str += 6;

    printf("%s\n", str);
    return 0;
}

// string copy program
#include <stdio.h>
void stringcopy(char *dest, char *src)
{

    for (src; *src; src++, dest++)
    {
        *dest = *src;
    }
    *dest = 0;
}
int main()
{
    char array1[20];
    char array2[20];
    scanf("%s", array1);
    stringcopy(array2, array1);
    printf("%s\n", array2);
    return 0;
}

// ref.cpp
#include <stdio.h>

void fun(int &b)
{
    b = 99;
}
int main()
{
    int a = 1;
    fun(a);
    printf("%d\n", a);
}

// return_ref.cpp
#include <stdlib.h>
#include <stdio.h>

int &makeInt(int val)
{
    int *p;
    p = (int *)malloc(sizeof(int));
    *p = val;
    return *p;
}
int main()
{
    int &a = makeInt(3);
    printf("%d\n", a);
}

// rswap.cpp
#include <stdio.h>

void rswap(int &x, int &y)
{
    int temp;
    temp = x;
    x = y;
    y = temp;
}

int main()
{
    int a = 0, b = 0;
    printf("a와 b의 값을 입력하시오 : ");
    scanf("%d %d", &a, &b);
    rswap(a, b);
    printf("%d %d\n", a, b);
}
// Day_2
// error.c
#include <stdlib.h>
#include <stdio.h>

int main()
{
    double *pDegree = NULL; // 포인터 초기화
    pDegree = (double *)malloc(sizeof(double));
    *pDegree = 12.345;
    printf("%lf\n", *pDegree);
}

// strcpy.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char str1[] = "Hello World";
    char *s;
    s = str1;
    printf("%s\n", s);
    strcpy(str1, "Howdy!");
    printf("%s\n", s);
}

// strcpy.c => malloc
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char str1[] = "Hello World";
    char *s;
    s = str1;
    s = (char *)malloc(strlen(str1) + 1);
    strcpy(s, str1);
    printf("%s\n", s);
    strcpy(str1, "Howdy!");
    printf("%s\n", s);
    printf("%s\n", str1);
}

//pointer_array.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char *pp[4];

    pp[0] = (char *)malloc(strlen("Hello") + 1);
    strcpy(pp[0], "Hello");
    printf("%s\n", pp[0]);

    char buffer[80];
    printf("string 입력 : ");
    scanf("%s", buffer);
    pp[1] = (char *)malloc(strlen(buffer) + 1);
    strcpy(pp[1], buffer);
    printf("%s\n", pp[1]);

    return 0;
}

// ptrarray.c => 최근에 넣은 값부터 출력해라
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char buffer[80];
    char *strptr[3];

    for (int i = 0; i < 3; i++)
    {
        scanf("%s", buffer);
        strptr[i] = (char *)malloc(strlen(buffer) + 1);
        strcpy(strptr[i], buffer);
    }
    for (int i = 2; i >= 0; i--)
    {
        printf("%s\n", strptr[i]);
    }
}

//darray.c => 주어진 배열을 동적 배열로 바꾸기
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    //int array[5];
    int index;
    int size;
    printf("Size를 입력하세요 : ");
    scanf("%d", &size);
    int *array = NULL;
    array = (int *)malloc(size * sizeof(int));
    for (index = 0; index < size; index++)
    {
        array[index] = index;
    }
    for (index = size - 1; index >= 0; index--)
    {
        printf("%d\n", array[index]);
    }
}

//realloc. c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{
    char *p;
    char q[20];

    p = (char *)malloc(sizeof(char) * 10);
    printf("string 입력 : ");
    scanf("%s", q);
    strcpy(p, q);

    printf("string 입력 : ");
    scanf("%s", q);

    if (strlen(p) + strlen(q) + 1 > 10)
    {
        p = realloc(p, strlen(p) + strlen(q) + 1);
    }
    strcat(p, q);
    printf("%s\n", p);
    return 0;
}

// Day_3

// alist.c
#include <stdio.h>

int main()
{
    int start = 2;
    int score[8] = {55, 22, 11, 66, 33, 88, 44, 77};
    int next[8] = {3, 4, 1, 7, 6, -1, 0, 5};

    for (int i = start; i >= 0; i = next[i])
    {
        printf("%d\n", score[i]);
    }
    return 0;
}

//list1.c
#include <stdio.h>

struct item
{
    int score;
    struct item *next;
};

int main()
{
    struct item A, B;
    struct item *first;
    first = &A;
    A.score = 1;
    A.next = &B;
    B.score = 2;
    B.next = NULL;
    printf("%d\n", first->score);       //A의 score -> 1 출력
    printf("%d\n", A.score);            //A의 score -> 1 출력
    printf("%d\n", first->next->score); //B의 score -> 2 출력
    printf("%d\n", B.score);            //B의 score -> 2 출력
    printf("%d\n", (*(A.next)).score);  //B의 score -> 2 출력
    return 0;
}

//list2.c => 중간에 C 추가
#include <stdio.h>

struct item
{
    int score;
    struct item *next;
};

int main()
{
    struct item A, B, C;
    struct item *first;
    first = &A;
    A.score = 1;
    A.next = &B;
    B.score = 2;
    B.next = NULL;

    C.score = 3;
    C.next = &A;
    first = &C;

    printf("%d\n", first->score);             //C의 score -> 3 출력
    printf("%d\n", first->next->score);       //A의 score -> 1 출력
    printf("%d\n", first->next->next->score); //B의 score -> 2 출력

    return 0;
}